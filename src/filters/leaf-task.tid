title: $:/plugins/linonetwo/intention-tower-knowledge-graph/filters/leaf-task

\define filter-is-new-task() [<currentTiddler>tag{$:/plugins/linonetwo/intention-tower-knowledge-graph/Config/task-tag}!field:tmo_taskState[Completed]!field:tmo_taskState[Archived]!field:tmo_taskState[Terminated]!field:tmo_taskState[Suspended]]

<!--
  have at least a not completed child tagging it  
-->
\define filter-is-not-leaf() [all[current]tagging[]filter<filter-is-new-task>] 

<!-- // TODO: try replace with in-tagtree-of -->
<!-- projects are tasks, so getting all projects under current (intention), then get those is in new task state  -->
\define get-non-completed-leaf-projects() [all[current]taggingtree[]tag{$:/plugins/linonetwo/intention-tower-knowledge-graph/Config/project-tag}filter<filter-is-new-task>]
<!-- for each child (in tagtree of current tiddler), remove out all that is not leaf, and get those is in new task state -->
\define get-non-completed-leaf-tasks() [all[current]taggingtree[]!filter<filter-is-not-leaf>filter<filter-is-new-task>]
<!-- get all project first, and for each project, run same logic as get-non-completed-leaf-tasks. If some project is sub project of others, this may introduce duplication, so deduplicate at last. -->
\define get-all-non-completed-leaf-tasks() [all[tiddlers]tag{$:/plugins/linonetwo/intention-tower-knowledge-graph/Config/project-tag}filter<filter-is-new-task>] :map:flat[<currentTiddler>taggingtree[]debug-log[]!filter<filter-is-not-leaf>filter<filter-is-new-task>] :and[unique[]]